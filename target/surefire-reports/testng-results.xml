<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="4" total="25" passed="18">
  <reporter-output>
  </reporter-output>
  <suite name="AutoTestSuite_1" duration-ms="1232634" started-at="2021-02-28T14:08:16 EET" finished-at="2021-02-28T14:28:49 EET">
    <groups>
      <group name="teacher">
        <method signature="LoginTests.test01teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test01teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test02teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test02teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test03teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test03teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test04teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test04teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test05teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test05teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test06teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test06teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="RegisterTests.test01teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test01teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test02teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test02teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test03teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test03teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test04teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test04teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test05teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test05teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test06teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test06teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test07teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test07teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test08teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test08teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test09teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test09teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test10teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test10teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test11teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test11teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test12teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test12teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test13teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test13teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="StudentRegisterTests.test01registerStudent()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test01registerStudent" class="app.tests.teacher.StudentRegisterTests"/>
        <method signature="StudentRegisterTests.test02registerStudentGroup()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test02registerStudentGroup" class="app.tests.teacher.StudentRegisterTests"/>
      </group> <!-- teacher -->
      <group name="register">
        <method signature="LoginTests.test01teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test01teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test02teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test02teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test03teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test03teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test04teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test04teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test05teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test05teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="LoginTests.test06teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test06teacherLogin" class="app.tests.teacher.LoginTests"/>
        <method signature="RegisterTests.test01teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test01teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test02teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test02teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test03teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test03teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test04teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test04teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test05teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test05teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test06teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test06teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test07teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test07teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test08teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test08teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test09teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test09teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test10teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test10teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test11teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test11teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test12teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test12teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="RegisterTests.test13teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test13teacherRegister" class="app.tests.teacher.RegisterTests"/>
        <method signature="StudentRegisterTests.test01registerStudent()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test01registerStudent" class="app.tests.teacher.StudentRegisterTests"/>
        <method signature="StudentRegisterTests.test02registerStudentGroup()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test02registerStudentGroup" class="app.tests.teacher.StudentRegisterTests"/>
      </group> <!-- register -->
    </groups>
    <test name="Teacher: Testsets for teacher." duration-ms="1232634" started-at="2021-02-28T14:08:16 EET" finished-at="2021-02-28T14:28:49 EET">
      <class name="app.tests.teacher.StudentRegisterTests">
        <test-method status="PASS" signature="preTestset()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="preTestset" is-config="true" duration-ms="0" started-at="2021-02-28T14:15:39 EET" description="Pre-testset fixture." finished-at="2021-02-28T14:15:39 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTestset -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:15:39 EET" description="Start logging." finished-at="2021-02-28T14:15:39 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.StudentRegisterTests.test01registerStudent()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@58e13c25]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:15:39 EET" description="Pre-test fixture." finished-at="2021-02-28T14:15:39 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test01registerStudent()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test01registerStudent" duration-ms="99107" started-at="2021-02-28T14:15:39 EET" description="Test 01. Teacher register Student." finished-at="2021-02-28T14:17:18 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test01registerStudent -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:17:18 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:17:18 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test01registerStudent status=SUCCESS method=StudentRegisterTests.test01registerStudent()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:17:18 EET" description="Start logging." finished-at="2021-02-28T14:17:18 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.StudentRegisterTests.test02registerStudentGroup()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@697b20d5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:17:18 EET" description="Pre-test fixture." finished-at="2021-02-28T14:17:18 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test02registerStudentGroup()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="test02registerStudentGroup" duration-ms="686731" started-at="2021-02-28T14:17:18 EET" description="Test 02. Teacher register group of students." finished-at="2021-02-28T14:28:44 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test02registerStudentGroup -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="afterTest" is-config="true" duration-ms="2" started-at="2021-02-28T14:28:44 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:28:45 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test02registerStudentGroup status=SUCCESS method=StudentRegisterTests.test02registerStudentGroup()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="postTestSet()[pri:0, instance:app.tests.teacher.StudentRegisterTests@f324455]" name="postTestSet" is-config="true" duration-ms="4596" started-at="2021-02-28T14:28:45 EET" description="Fixture: Navigate Main Menu after testset." finished-at="2021-02-28T14:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postTestSet -->
      </class> <!-- app.tests.teacher.StudentRegisterTests -->
      <class name="app.tests.teacher.LoginTests">
        <test-method status="PASS" signature="preTestset()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTestset" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:12 EET" description="Pre-testset fixture." finished-at="2021-02-28T14:14:12 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTestset -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:12 EET" description="Start logging." finished-at="2021-02-28T14:14:12 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test01teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d8beeb3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:14:12 EET" description="Pre-test fixture." finished-at="2021-02-28T14:14:12 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test01teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test01teacherLogin" duration-ms="21898" started-at="2021-02-28T14:14:12 EET" description="Test 01. Login as a Teacher ." finished-at="2021-02-28T14:14:34 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test01teacherLogin -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:34 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:14:34 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test01teacherLogin status=SUCCESS method=LoginTests.test01teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:14:34 EET" description="Start logging." finished-at="2021-02-28T14:14:34 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test02teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@abf4b39]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:34 EET" description="Pre-test fixture." finished-at="2021-02-28T14:14:34 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test02teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test02teacherLogin" duration-ms="11471" started-at="2021-02-28T14:14:34 EET" description="Test 02. Not possible to Login with empty fields." finished-at="2021-02-28T14:14:46 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test02teacherLogin -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:46 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:14:46 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test02teacherLogin status=SUCCESS method=LoginTests.test02teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="2" started-at="2021-02-28T14:14:46 EET" description="Start logging." finished-at="2021-02-28T14:14:46 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test03teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5bee5e5f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:14:46 EET" description="Pre-test fixture." finished-at="2021-02-28T14:14:46 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test03teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test03teacherLogin" duration-ms="11926" started-at="2021-02-28T14:14:46 EET" description="Test 03. Not possible to Login with empty field School email." finished-at="2021-02-28T14:14:58 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test03teacherLogin -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:58 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:14:58 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test03teacherLogin status=SUCCESS method=LoginTests.test03teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:58 EET" description="Start logging." finished-at="2021-02-28T14:14:58 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test04teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6b23a07f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="test04teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test04teacherLogin" duration-ms="12191" started-at="2021-02-28T14:14:59 EET" description="Test 04. Not possible to Login with empty field Password." finished-at="2021-02-28T14:15:11 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test04teacherLogin -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:14:59 EET" description="Pre-test fixture." finished-at="2021-02-28T14:14:59 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:15:11 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:15:11 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test04teacherLogin status=SUCCESS method=LoginTests.test04teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:15:11 EET" description="Start logging." finished-at="2021-02-28T14:15:11 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test05teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@59ef35de]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:15:11 EET" description="Pre-test fixture." finished-at="2021-02-28T14:15:11 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test05teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test05teacherLogin" duration-ms="11563" started-at="2021-02-28T14:15:11 EET" description="Test 05. Login with  wrong field School email." finished-at="2021-02-28T14:15:23 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test05teacherLogin -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:15:23 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:15:23 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test05teacherLogin status=SUCCESS method=LoginTests.test05teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:15:23 EET" description="Start logging." finished-at="2021-02-28T14:15:23 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.LoginTests.test06teacherLogin()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@29f94b59]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:15:23 EET" description="Pre-test fixture." finished-at="2021-02-28T14:15:23 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test06teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="test06teacherLogin" duration-ms="11412" started-at="2021-02-28T14:15:23 EET" description="Test 06. Not possible to Login with empty field Password." finished-at="2021-02-28T14:15:34 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test06teacherLogin -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:15:34 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:15:34 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test06teacherLogin status=SUCCESS method=LoginTests.test06teacherLogin()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="postTestSet()[pri:0, instance:app.tests.teacher.LoginTests@7b6c6e70]" name="postTestSet" is-config="true" duration-ms="4612" started-at="2021-02-28T14:15:34 EET" description="Fixture: Navigate Main Menu after testset." finished-at="2021-02-28T14:15:39 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postTestSet -->
      </class> <!-- app.tests.teacher.LoginTests -->
      <class name="app.tests.teacher.RegisterTests">
        <test-method status="PASS" signature="suiteSetup(java.lang.String, java.lang.String)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="suiteSetup" is-config="true" duration-ms="19212" started-at="2021-02-28T14:07:57 EET" description="Initial configuration before every TestSuite (Set System variables for test suite, open browser)." finished-at="2021-02-28T14:08:16 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method status="PASS" signature="preTestset()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTestset" is-config="true" duration-ms="1" started-at="2021-02-28T14:08:16 EET" description="Pre-testset fixture." finished-at="2021-02-28T14:08:16 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTestset -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="2" started-at="2021-02-28T14:08:17 EET" description="Start logging." finished-at="2021-02-28T14:08:17 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test01teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@ccf49f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:08:17 EET" description="Pre-test fixture." finished-at="2021-02-28T14:08:17 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test01teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test01teacherRegister" duration-ms="35281" started-at="2021-02-28T14:08:17 EET" description="Test 01.Register new Teacher ." finished-at="2021-02-28T14:08:52 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test01teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="3" started-at="2021-02-28T14:08:52 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:08:52 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test01teacherRegister status=SUCCESS method=RegisterTests.test01teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:08:52 EET" description="Start logging." finished-at="2021-02-28T14:08:52 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test02teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@761a8ca1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:08:52 EET" description="Pre-test fixture." finished-at="2021-02-28T14:08:52 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test02teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test02teacherRegister" duration-ms="29400" started-at="2021-02-28T14:08:52 EET" description="Test 02. Register new Teacher with empty form fields." finished-at="2021-02-28T14:09:21 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test02teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:09:21 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:09:21 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test02teacherRegister status=SUCCESS method=RegisterTests.test02teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:09:21 EET" description="Start logging." finished-at="2021-02-28T14:09:21 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test03teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@56fb1679]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:09:21 EET" description="Pre-test fixture." finished-at="2021-02-28T14:09:21 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test03teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test03teacherRegister" duration-ms="24221" started-at="2021-02-28T14:09:21 EET" description="Test 03. Register new Teacher with empty field First Name." finished-at="2021-02-28T14:09:46 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test03teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:09:46 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:09:46 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test03teacherRegister status=SUCCESS method=RegisterTests.test03teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:09:46 EET" description="Start logging." finished-at="2021-02-28T14:09:46 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test04teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@35bb3c7c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:09:46 EET" description="Pre-test fixture." finished-at="2021-02-28T14:09:46 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test04teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test04teacherRegister" duration-ms="22408" started-at="2021-02-28T14:09:46 EET" description="Test 04. Register new Teacher with empty field Last Name." finished-at="2021-02-28T14:10:08 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test04teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:10:08 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:10:08 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test04teacherRegister status=SUCCESS method=RegisterTests.test04teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:10:08 EET" description="Start logging." finished-at="2021-02-28T14:10:08 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test05teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@52b44e58]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:10:08 EET" description="Pre-test fixture." finished-at="2021-02-28T14:10:08 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test05teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test05teacherRegister" duration-ms="16950" started-at="2021-02-28T14:10:08 EET" description="Test 05. Register new Teacher with empty field School/Organization." finished-at="2021-02-28T14:10:25 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test05teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="3" started-at="2021-02-28T14:10:25 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:10:25 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test05teacherRegister status=SUCCESS method=RegisterTests.test05teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:10:25 EET" description="Start logging." finished-at="2021-02-28T14:10:25 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test06teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@70e9af2b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:10:25 EET" description="Pre-test fixture." finished-at="2021-02-28T14:10:25 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test06teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test06teacherRegister" duration-ms="25566" started-at="2021-02-28T14:10:25 EET" description="Test 06. Register new Teacher with empty field Email Address." finished-at="2021-02-28T14:10:51 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test06teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="2" started-at="2021-02-28T14:10:51 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:10:51 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test06teacherRegister status=SUCCESS method=RegisterTests.test06teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:10:51 EET" description="Start logging." finished-at="2021-02-28T14:10:51 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test07teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e2f2791]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:10:51 EET" description="Pre-test fixture." finished-at="2021-02-28T14:10:51 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test07teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test07teacherRegister" duration-ms="25228" started-at="2021-02-28T14:10:51 EET" description="Test 07. Register new Teacher with empty field Password." finished-at="2021-02-28T14:11:16 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test07teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:16 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:11:16 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test07teacherRegister status=SUCCESS method=RegisterTests.test07teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:16 EET" description="Start logging." finished-at="2021-02-28T14:11:16 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test08teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@121bacf4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:11:16 EET" description="Pre-test fixture." finished-at="2021-02-28T14:11:16 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test08teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test08teacherRegister" duration-ms="16961" started-at="2021-02-28T14:11:16 EET" description="Test 08. Register new Teacher with wrong field School/Organization." finished-at="2021-02-28T14:11:33 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test08teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="2" started-at="2021-02-28T14:11:33 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:11:33 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test08teacherRegister status=SUCCESS method=RegisterTests.test08teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:11:33 EET" description="Start logging." finished-at="2021-02-28T14:11:33 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test09teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@62ade661]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:33 EET" description="Pre-test fixture." finished-at="2021-02-28T14:11:33 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test09teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test09teacherRegister" duration-ms="21377" started-at="2021-02-28T14:11:33 EET" description="Test 09. Register new Teacher with wrong field Email Address." finished-at="2021-02-28T14:11:54 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test09teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:54 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:11:54 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test09teacherRegister status=SUCCESS method=RegisterTests.test09teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:54 EET" description="Start logging." finished-at="2021-02-28T14:11:54 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test10teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@5f808de8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:11:54 EET" description="Pre-test fixture." finished-at="2021-02-28T14:11:54 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="FAIL" signature="test10teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test10teacherRegister" duration-ms="31955" started-at="2021-02-28T14:11:54 EET" description="Test 10. Register new Teacher with wrong field Email Address. !!!MINOR ISSUE!!!" finished-at="2021-02-28T14:12:26 EET">
          <exception class="com.codeborne.selenide.ex.ElementNotFound">
            <message>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514337242.0.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}]]>
            </message>
            <full-stacktrace>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514337242.0.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
at com.codeborne.selenide.impl.WebElementSource.createElementNotFoundError(WebElementSource.java:56)
at com.codeborne.selenide.impl.ElementFinder.createElementNotFoundError(ElementFinder.java:136)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:87)
at com.codeborne.selenide.commands.Should.execute(Should.java:30)
at com.codeborne.selenide.commands.Should.execute(Should.java:14)
at com.codeborne.selenide.commands.Commands.execute(Commands.java:153)
at com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:112)
at com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:68)
at com.sun.proxy.$Proxy44.shouldBe(Unknown Source)
at app.pageobject.BasePageObject.checkError(BasePageObject.java:94)
at app.tests.teacher.TeacherScenario.failedRegister(TeacherScenario.java:120)
at app.tests.teacher.RegisterTests.test10teacherRegister(RegisterTests.java:169)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
  (Session info: MicrosoftEdge=88.0.705.81)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'DESKTOP-VMP5GT0', ip: '192.168.1.53', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.edge.EdgeDriver
Capabilities {acceptInsecureCerts: true, browserName: msedge, browserVersion: 88.0.705.81, javascriptEnabled: true, ms:edgeOptions: {debuggerAddress: localhost:49511}, msedge: {msedgedriverVersion: 88.0.705.81 (324d415ccf2f0d..., userDataDir: C:\Users\yuriy\AppData\Loca...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: cffa6f10a4a5f8fbd39534f9977e383a
*** Element info: {Using=xpath, value=.//div[@class='bt-content']}
at sun.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:65)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:40)
at com.codeborne.selenide.impl.ElementFinder.getWebElement(ElementFinder.java:104)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:72)
... 41 more
]]>
            </full-stacktrace>
          </exception> <!-- com.codeborne.selenide.ex.ElementNotFound -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test10teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="6544" started-at="2021-02-28T14:12:26 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:12:33 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test10teacherRegister status=FAILURE method=RegisterTests.test10teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="0" started-at="2021-02-28T14:12:33 EET" description="Start logging." finished-at="2021-02-28T14:12:33 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test11teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e2d085c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:12:33 EET" description="Pre-test fixture." finished-at="2021-02-28T14:12:33 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="FAIL" signature="test11teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test11teacherRegister" duration-ms="32246" started-at="2021-02-28T14:12:33 EET" description="Test 11. Register new Teacher with field First Name: &#039;    &#039;. !!!MINOR ISSUE!!!" finished-at="2021-02-28T14:13:05 EET">
          <exception class="com.codeborne.selenide.ex.ElementNotFound">
            <message>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514376035.1.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}]]>
            </message>
            <full-stacktrace>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514376035.1.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
at com.codeborne.selenide.impl.WebElementSource.createElementNotFoundError(WebElementSource.java:56)
at com.codeborne.selenide.impl.ElementFinder.createElementNotFoundError(ElementFinder.java:136)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:87)
at com.codeborne.selenide.commands.Should.execute(Should.java:30)
at com.codeborne.selenide.commands.Should.execute(Should.java:14)
at com.codeborne.selenide.commands.Commands.execute(Commands.java:153)
at com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:112)
at com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:68)
at com.sun.proxy.$Proxy44.shouldBe(Unknown Source)
at app.pageobject.BasePageObject.checkError(BasePageObject.java:94)
at app.tests.teacher.TeacherScenario.failedRegister(TeacherScenario.java:120)
at app.tests.teacher.RegisterTests.test11teacherRegister(RegisterTests.java:183)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
  (Session info: MicrosoftEdge=88.0.705.81)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'DESKTOP-VMP5GT0', ip: '192.168.1.53', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.edge.EdgeDriver
Capabilities {acceptInsecureCerts: true, browserName: msedge, browserVersion: 88.0.705.81, javascriptEnabled: true, ms:edgeOptions: {debuggerAddress: localhost:49511}, msedge: {msedgedriverVersion: 88.0.705.81 (324d415ccf2f0d..., userDataDir: C:\Users\yuriy\AppData\Loca...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: cffa6f10a4a5f8fbd39534f9977e383a
*** Element info: {Using=xpath, value=.//div[@class='bt-content']}
at sun.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:65)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:40)
at com.codeborne.selenide.impl.ElementFinder.getWebElement(ElementFinder.java:104)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:72)
... 41 more
]]>
            </full-stacktrace>
          </exception> <!-- com.codeborne.selenide.ex.ElementNotFound -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test11teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="6357" started-at="2021-02-28T14:13:05 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:13:11 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test11teacherRegister status=FAILURE method=RegisterTests.test11teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:13:11 EET" description="Start logging." finished-at="2021-02-28T14:13:11 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test12teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@21ae26b0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:13:12 EET" description="Pre-test fixture." finished-at="2021-02-28T14:13:12 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="FAIL" signature="test12teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test12teacherRegister" duration-ms="32316" started-at="2021-02-28T14:13:12 EET" description="Test 12. Register new Teacher field Last Name: &#039;     &#039;. !!!MINOR ISSUE!!!" finished-at="2021-02-28T14:13:44 EET">
          <exception class="com.codeborne.selenide.ex.ElementNotFound">
            <message>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514415303.2.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}]]>
            </message>
            <full-stacktrace>
              <![CDATA[Element not found {By.xpath: .//div[@class='bt-content']}
Expected: exist
Screenshot: file:/C:/Users/yuriy/IdeaProjects/MobyMaxApplication/build/reports/tests/1614514415303.2.png
Timeout: 10 s.
Caused by: NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
at com.codeborne.selenide.impl.WebElementSource.createElementNotFoundError(WebElementSource.java:56)
at com.codeborne.selenide.impl.ElementFinder.createElementNotFoundError(ElementFinder.java:136)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:87)
at com.codeborne.selenide.commands.Should.execute(Should.java:30)
at com.codeborne.selenide.commands.Should.execute(Should.java:14)
at com.codeborne.selenide.commands.Commands.execute(Commands.java:153)
at com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:112)
at com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:68)
at com.sun.proxy.$Proxy44.shouldBe(Unknown Source)
at app.pageobject.BasePageObject.checkError(BasePageObject.java:94)
at app.tests.teacher.TeacherScenario.failedRegister(TeacherScenario.java:120)
at app.tests.teacher.RegisterTests.test12teacherRegister(RegisterTests.java:196)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":".//div[@class='bt-content']"}
  (Session info: MicrosoftEdge=88.0.705.81)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'DESKTOP-VMP5GT0', ip: '192.168.1.53', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.edge.EdgeDriver
Capabilities {acceptInsecureCerts: true, browserName: msedge, browserVersion: 88.0.705.81, javascriptEnabled: true, ms:edgeOptions: {debuggerAddress: localhost:49511}, msedge: {msedgedriverVersion: 88.0.705.81 (324d415ccf2f0d..., userDataDir: C:\Users\yuriy\AppData\Loca...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: cffa6f10a4a5f8fbd39534f9977e383a
*** Element info: {Using=xpath, value=.//div[@class='bt-content']}
at sun.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:65)
at com.codeborne.selenide.impl.WebElementSelector.findElement(WebElementSelector.java:40)
at com.codeborne.selenide.impl.ElementFinder.getWebElement(ElementFinder.java:104)
at com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:72)
... 41 more
]]>
            </full-stacktrace>
          </exception> <!-- com.codeborne.selenide.ex.ElementNotFound -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test12teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="6239" started-at="2021-02-28T14:13:44 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:13:50 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test12teacherRegister status=FAILURE method=RegisterTests.test12teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="logTestStart(java.lang.reflect.Method, [Ljava.lang.Object;)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="logTestStart" is-config="true" duration-ms="1" started-at="2021-02-28T14:13:50 EET" description="Start logging." finished-at="2021-02-28T14:13:50 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void app.tests.teacher.RegisterTests.test13teacherRegister()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1cbfca27]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method status="PASS" signature="preTest()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="preTest" is-config="true" duration-ms="0" started-at="2021-02-28T14:13:50 EET" description="Pre-test fixture." finished-at="2021-02-28T14:13:50 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preTest -->
        <test-method status="PASS" signature="test13teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="test13teacherRegister" duration-ms="17128" started-at="2021-02-28T14:13:50 EET" description="Test 13. Register new Teacher for busy email." finished-at="2021-02-28T14:14:08 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test13teacherRegister -->
        <test-method status="PASS" signature="afterTest(org.testng.ITestResult)[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="afterTest" is-config="true" duration-ms="1" started-at="2021-02-28T14:14:08 EET" description="Test completion fixture. For failed cases: Add page screenshot, then navigate to initial point." finished-at="2021-02-28T14:14:08 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test13teacherRegister status=SUCCESS method=RegisterTests.test13teacherRegister()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="postTestSet()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="postTestSet" is-config="true" duration-ms="4608" started-at="2021-02-28T14:14:08 EET" description="Fixture: Navigate Main Menu after testset." finished-at="2021-02-28T14:14:12 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postTestSet -->
        <test-method status="PASS" signature="testSuiteDown()[pri:0, instance:app.tests.teacher.RegisterTests@767f6ee7]" name="testSuiteDown" is-config="true" duration-ms="9" started-at="2021-02-28T14:28:49 EET" finished-at="2021-02-28T14:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuiteDown -->
      </class> <!-- app.tests.teacher.RegisterTests -->
    </test> <!-- Teacher: Testsets for teacher. -->
  </suite> <!-- AutoTestSuite_1 -->
</testng-results>
